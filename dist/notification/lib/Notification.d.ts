import { Observable, Subject } from 'rxjs';
import { OverlayRef } from '@angular/cdk/overlay';
import { MatDialogRef } from '@angular/material';
import { WindowBase } from '../../window/lib/WindowBase';
import { INotification } from './INotification';
import { INotificationContent } from './INotificationContent';
import { NotificationConfig } from './NotificationConfig';
export declare class Notification extends WindowBase implements INotification {
    private static OPEN_DELAY;
    protected _config: NotificationConfig;
    protected _overlay: OverlayRef;
    protected _reference: MatDialogRef<INotificationContent>;
    protected timer: any;
    protected observer: Subject<string>;
    constructor(reference: MatDialogRef<INotificationContent>, config?: NotificationConfig, overlay?: OverlayRef);
    protected setProperties(): void;
    protected setClosed: () => void;
    protected setOpened: () => void;
    protected getConfig(): NotificationConfig;
    protected getContainer(): HTMLElement;
    protected getReference(): MatDialogRef<INotificationContent>;
    emit(event: string): void;
    close(): void;
    remove(): void;
    destroy(): void;
    getWidth(): number;
    getHeight(): number;
    setWidth(value: number): void;
    setHeight(value: number): void;
    setSize(width: number, height: number): void;
    getX(): number;
    setX(value: number): void;
    getY(): number;
    setY(value: number): void;
    move(x: number, y: number): void;
    readonly events: Observable<string>;
    readonly config: NotificationConfig;
    readonly content: INotificationContent;
    readonly container: HTMLElement;
}
