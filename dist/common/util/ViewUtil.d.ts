import { Renderer2 } from '@angular/core';
export declare class ViewUtil {
    static RENDEDER: Renderer2;
    static FOCUS_DELAY: number;
    static VIDEO_RATIO: number;
    private static copyToClipboard;
    static parseElement(element: any): HTMLElement;
    static createBase64(element: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement): string;
    static selectContent(container: HTMLElement, isNeedCopyToClipboard?: boolean): void;
    static setBackground(container: HTMLElement, value: string, repeat?: string): void;
    static createElement(name: string, className?: string, innerHTML?: string): any;
    static appendChild(parent: any, child: any): void;
    static removeChild(parent: any, child: any): void;
    static toggleChild(container: Node, child: Node, value: boolean): void;
    static readonly stageWidth: number;
    static readonly stageHeight: number;
    static getWidth(container: HTMLElement): number;
    static setWidth(container: HTMLElement, value: number, isNeedCheckLimits: boolean): boolean;
    static getMaxWidth(container: HTMLElement): number;
    static getMinWidth(container: HTMLElement): number;
    static getHeight(container: HTMLElement): number;
    static setHeight(container: HTMLElement, value: number, isNeedCheckLimits: boolean): boolean;
    static getMaxHeight(container: HTMLElement): number;
    static getMinHeight(container: HTMLElement): number;
    static size(container: HTMLElement, width: number, height: number, isNeedCheckLimits: boolean): void;
    static getX(container: HTMLElement): number;
    static setX(container: HTMLElement, value: number): void;
    static getY(container: HTMLElement): number;
    static setY(container: HTMLElement, value: number): void;
    static move(container: HTMLElement, x: number, y: number): void;
    static focusInput(input: HTMLInputElement | HTMLTextAreaElement): void;
    static addClass(container: any, name: string): void;
    static addClasses(container: any, names: string): void;
    static removeClass(container: any, name: string): void;
    static removeClasses(container: any, names: string): void;
    static hasClass(container: any, name: string): boolean;
    static toggleClass(container: any, name: string, value: boolean): void;
    static getProperty(container: any, name: string): any;
    static setProperty(container: any, name: string, value: any): void;
    static removeProperty(container: any, name: string): void;
    static removeAttribute(container: any, name: string): void;
    static setAttribute(container: any, name: string, value: any): void;
    static getStyle(container: any, name: string): any;
    static setStyle(container: any, name: string, value: any): void;
    static removeStyle(container: any, name: string): void;
    static createVideo(isMute?: boolean, isInline?: boolean): HTMLVideoElement;
    static setVideoMuteParameters(video: HTMLVideoElement, isMute?: boolean): void;
    static setVideoInlineParameters(video: HTMLVideoElement): void;
    static getVideoError(video: HTMLVideoElement): string;
    static playVideo(video: HTMLVideoElement): Promise<void>;
    static playAudio(audio: HTMLAudioElement): Promise<void>;
    static pauseVideo(video: HTMLVideoElement): void;
    static isVideoPlaying(video: HTMLVideoElement): boolean;
    static loadVideo(video: HTMLVideoElement): void;
    static stopVideoIfNeed(video: HTMLVideoElement): void;
    static stopVideo(video: HTMLVideoElement): void;
    static disposeVideo(video: HTMLVideoElement): void;
    static disposeVideos(container: HTMLElement): void;
    static disposeObjects(container: HTMLElement, isIEBrowser?: boolean): void;
    static disposeObject(object: HTMLObjectElement, isIEBrowser?: boolean): void;
}
