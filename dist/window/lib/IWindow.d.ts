import { Observable } from 'rxjs';
import { IDestroyable } from '../../common/IDestroyable';
import { IWindowContent } from './IWindowContent';
import { WindowConfig } from './WindowConfig';
export declare abstract class IWindow implements IDestroyable {
    static EVENT_OPENED: string;
    static EVENT_CLOSED: string;
    static EVENT_CONTENT_READY: string;
    static EVENT_MOVED: string;
    static EVENT_RESIZED: string;
    static EVENT_MINIMIZED_CHANGED: string;
    static EVENT_SET_ON_TOP: string;
    abstract close(): void;
    abstract destroy(): void;
    abstract blink(): void;
    abstract shake(): void;
    abstract setOnTop(): void;
    abstract getWidth(): number;
    abstract getHeight(): number;
    abstract setWidth(value: number): void;
    abstract setHeight(value: number): void;
    abstract setSize(width: number, height: number): void;
    abstract getX(): number;
    abstract getY(): number;
    abstract setX(value: number): void;
    abstract setY(value: number): void;
    abstract move(x: number, y: number): void;
    abstract emit(event: string): void;
    isOnTop: boolean;
    isMinimized: boolean;
    readonly events: Observable<string>;
    readonly container: HTMLElement;
    readonly wrapper: HTMLElement;
    readonly backdrop: HTMLElement;
    readonly config: WindowConfig;
    readonly content: IWindowContent;
}
